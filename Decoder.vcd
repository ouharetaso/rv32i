$date
	Wed Oct  2 22:46:04 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module decoder_tb $end
$scope module DUT $end
$var wire 32 ! i_opcode [31:0] $end
$var wire 32 " i_pc [31:0] $end
$var wire 5 # rs2 [4:0] $end
$var wire 5 $ rs1 [4:0] $end
$var wire 5 % rd [4:0] $end
$var wire 7 & opcode [6:0] $end
$var wire 7 ' funct7 [6:0] $end
$var wire 3 ( funct3 [2:0] $end
$var wire 32 ) U_immediate [31:0] $end
$var wire 32 * S_immediate [31:0] $end
$var wire 32 + J_immediate [31:0] $end
$var wire 32 , I_immediate [31:0] $end
$var wire 32 - B_immediate [31:0] $end
$var parameter 7 . opcode_AUIPC $end
$var parameter 7 / opcode_BRANCH $end
$var parameter 7 0 opcode_JAL $end
$var parameter 7 1 opcode_JALR $end
$var parameter 7 2 opcode_LOAD $end
$var parameter 7 3 opcode_LUI $end
$var parameter 7 4 opcode_OP $end
$var parameter 7 5 opcode_OP_IMM $end
$var parameter 7 6 opcode_STORE $end
$var parameter 7 7 opcode_SYSTEM $end
$var reg 4 8 o_alu_op [3:0] $end
$var reg 1 9 o_en_imm $end
$var reg 1 : o_en_jump $end
$var reg 1 ; o_illegal_instruction $end
$var reg 32 < o_imm [31:0] $end
$var reg 2 = o_jump [1:0] $end
$var reg 32 > o_jump_addr [31:0] $end
$var reg 5 ? o_rd [4:0] $end
$var reg 5 @ o_rs1 [4:0] $end
$var reg 5 A o_rs2 [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1110011 7
b100011 6
b10011 5
b110011 4
b110111 3
b11 2
b1100111 1
b1101111 0
b1100011 /
b10111 .
$end
#0
$dumpvars
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
0;
0:
19
b0 8
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b10011 &
b0 %
b0 $
b0 #
b10000000000000000000000000000000 "
b10011 !
$end
#2
b1 8
b1100 <
b1111 @
b1 ?
b1100 ,
b1111001000000001100 +
b100000000000 -
b1 *
b1 %
b1 (
b1111 $
b1100 #
b110001111001000000000000 )
b110001111001000010010011 !
#4
b11111111111111111111110100000000 <
b10 8
b10 ?
b11111111111111111111110100000000 ,
b11111111111101111010010100000000 +
b11111111111111111111010100000010 -
b11111111111111111111110100000010 *
b10 %
b10 (
b0 #
b1101000 '
b11010000000001111010000000000000 )
b11010000000001111010000100010011 !
#6
b11111111111111111111100000000000 <
b11 8
b11 ?
b11111111111111111111100000000000 ,
b11111111111101111011000000000000 +
b11111111111111111111100000000010 -
b11111111111111111111100000000011 *
b11 %
b11 (
b1000000 '
b10000000000001111011000000000000 )
b10000000000001111011000110010011 !
#8
b100 8
b100 ?
b11111111111101111100000000000000 +
b11111111111111111111000000000100 -
b11111111111111111111100000000100 *
b100 %
b100 (
b10000000000001111100000000000000 )
b10000000000001111100001000010011 !
#10
b101 8
b1100 <
b101 ?
b1100 ,
b1111101000000001100 +
b100000000100 -
b101 *
b101 %
b101 (
b1100 #
b0 '
b110001111101000000000000 )
b110001111101001010010011 !
#12
b11111111111111111111100000000000 <
b110 8
b110 ?
b11111111111111111111100000000000 ,
b11111111111101111110000000000000 +
b11111111111111111111000000000110 -
b11111111111111111111100000000110 *
b110 %
b110 (
b0 #
b1000000 '
b10000000000001111110000000000000 )
b10000000000001111110001100010011 !
#14
b111 8
b111 ?
b11111111111101111111000000000000 +
b11111111111111111111100000000110 -
b11111111111111111111100000000111 *
b111 %
b111 (
b10000000000001111111000000000000 )
b10000000000001111111001110010011 !
#16
b1101 8
b1100 <
b1101 ?
b10000001100 ,
b1111101010000001100 +
b110000001100 -
b10000001101 *
b1101 %
b101 (
b1100 #
b100000 '
b1000000110001111101000000000000 )
b1000000110001111101011010010011 !
#18
b0 8
09
b10000 A
b11111 @
b1000 ?
b10000 ,
b11111000000000010000 +
b1000 -
b1000 *
b110011 &
b1000 %
b0 (
b11111 $
b10000 #
b0 '
b1000011111000000000000000 )
b1000011111000010000110011 !
#20
b1 8
b10001 A
b1001 ?
b10001 ,
b11111001100000010000 +
b100000001000 -
b1001 *
b1001 %
b1 (
b10001 #
b1000111111001000000000000 )
b1000111111001010010110011 !
#22
b10 8
b10010 A
b1010 ?
b10010 ,
b11111010000000010010 +
b1010 -
b1010 *
b1010 %
b10 (
b10010 #
b1001011111010000000000000 )
b1001011111010010100110011 !
#24
b11 8
b10011 A
b1011 ?
b10011 ,
b11111011100000010010 +
b100000001010 -
b1011 *
b1011 %
b11 (
b10011 #
b1001111111011000000000000 )
b1001111111011010110110011 !
#26
b100 8
b10100 A
b1100 ?
b10100 ,
b11111100000000010100 +
b1100 -
b1100 *
b1100 %
b100 (
b10100 #
b1010011111100000000000000 )
b1010011111100011000110011 !
#28
b101 8
b10101 A
b1101 ?
b10101 ,
b11111101100000010100 +
b100000001100 -
b1101 *
b1101 %
b101 (
b10101 #
b1010111111101000000000000 )
b1010111111101011010110011 !
#30
b110 8
b10110 A
b1110 ?
b10110 ,
b11111110000000010110 +
b1110 -
b1110 *
b1110 %
b110 (
b10110 #
b1011011111110000000000000 )
b1011011111110011100110011 !
#32
b111 8
b10111 A
b1111 ?
b10111 ,
b11111111100000010110 +
b100000001110 -
b1111 *
b1111 %
b111 (
b10111 #
b1011111111111000000000000 )
b1011111111111011110110011 !
#34
b1000 8
b11000 A
b10000 ?
b10000011000 ,
b11111000010000011000 +
b10000010000 -
b10000010000 *
b10000 %
b0 (
b11000 #
b100000 '
b1000001100011111000000000000000 )
b1000001100011111000100000110011 !
#36
b0 8
b10000000000000000000000000000000 >
1:
b0 <
19
b0 A
b0 @
b11011 ?
b0 ,
b0 +
b100000011010 -
b11011 *
b10111 &
b11011 %
b0 $
b0 #
b0 '
b0 )
b110110010111 !
#38
b11001111000 <
0:
b1 @
b1 ?
b11001111000 ,
b1000011001111000 +
b111001100000 -
b11001100001 *
b10011 &
b1 %
b1 $
b11000 #
b110011 '
b1100111100000001000000000000000 )
b1100111100000001000000010010011 !
#41
